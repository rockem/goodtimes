buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/libs-release" }
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.10.RELEASE"
        classpath 'com.wiredforcode:gradle-heroku-plugin:1.0.0'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.10'
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'heroku'
apply plugin: 'com.moowork.node'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/libs-release" }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.data:spring-data-jpa:1.7.2.RELEASE'
    compile 'org.springframework.data:spring-data-mongodb:1.6.2.RELEASE'
    compile 'com.google.code.gson:gson:2.3.1'
    compile "org.projectlombok:lombok:1.16.4"

    testCompile 'org.springframework:spring-test:4.1.4.RELEASE'
    testCompile 'com.jayway.jsonpath:json-path:1.2.0'

    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
}

task resolveNPMDependencies(type:Exec) {
    workingDir 'src/main/resources/public'
    commandLine "npm", "install"
}
//assemble.dependsOn resolveNPMDependencies

def getArgsFor(String... args) {
    def os = System.getProperty("os.name").toLowerCase()
    if (os.contains("windows"))
    {
        return ["cmd", "/c"] + args
    }  else { // assume Linux
        return args
    }
}

def mongoPort = 27017

task startMongo << {
    mkdir "data"
    mkdir "log"
    startMongoDB(mongoPort)
    println "MongoDB started on port $mongoPort"
}

def startMongoDB(mongoPort) {
    exec {
        workingDir projectDir
        commandLine getArgsFor("mongod", "--config", "mongodb.yml", "--port", "$mongoPort")
    }
}

task stopMongo << {
    stopMongoDB(mongoPort)
    println "MongoDB stopped on port $mongoPort"
}

def stopMongoDB(mongoPort) {
    exec {
        workingDir projectDir
        commandLine getArgsFor("mongo", "--port", "$mongoPort", "--eval", "db.getSiblingDB('admin').shutdownServer()")
    }
}

sourceSets {
    // Note that just declaring this sourceset creates two configurations.
    intTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
}

task intTest(type:Test){
    description = "Run integration tests (located in src/intTest)."
    testClassesDir = project.sourceSets.intTest.output.classesDir
    classpath = project.sourceSets.intTest.runtimeClasspath
}
test.dependsOn intTest



task createApplicationYml {
    def defaultYml = "application.yml.default"
    def ymlTarget = "$buildDir/$defaultYml"
    outputs.file file(ymlTarget)
    doLast {
        copy {
            from "$projectDir/src/main/resources/application.yml"
            into buildDir
            rename "application.yml", defaultYml
        }
    }
}

applicationDistribution.from(createApplicationYml) {
    into "bin"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

heroku {
    //get this from heroku
    apiKey = '9912c218aeaa7be012260ee7594fc367316a2a23'

    //set this on first run if you don't want a generated name
    appName = 'goodtimes-app'

    //set this if you are not happy with the default gradlew buildpack
    buildpack = 'https://github.com/krro/heroku-buildpack-gradle'
}


task installAngularDependencies(type: NpmTask) {
    workingDir = file("$projectDir/src/main/resources/public")
    args = ['install']
}
jar.dependsOn installAngularDependencies

node {
    npmVersion = '1.4.28'

    download = true

    workDir = file("$projectDir/src/main/resources/public/nodejs")

    nodeModulesDir = file("$projectDir/src/main/resources/public")
}